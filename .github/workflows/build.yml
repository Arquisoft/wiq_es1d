name: Build
on:
  push:
    branches:
      - master
      - develop
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  backend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: syg-backend
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
      
    - name: Build with Maven
      run: mvn clean verify
  
  frontend-tests:
     runs-on: ubuntu-latest
     defaults:
       run:
        working-directory: syg-frontend
     steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '21'  # Cambia según tu versión de Node.js
      - run: npm ci
      - run: npm test
      - run: npm run test:coverage
      - run: npm run lint

  sonarcloudBackend:
    name: sonarcloudBackend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: syg-backend
    steps:
     - uses: actions/checkout@v4
       with:
        fetch-depth: 0

     - name: Setup Java
       uses: actions/setup-java@v3
       with:
         distribution: 'temurin'
         java-version: '17'

      # Build and test the project
     - name: Build and Test
       run: mvn clean verify

     # SonarCloud analysis
     - name: SonarCloud Analysis
       run: mvn org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
       env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
  sonarcloudFrontend:
    name: sonarcloudFrontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: syg-frontend
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 21
      - run: npm ci
      - run: npm test
      - run: npm run test:coverage
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deployment:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
  
      - name: Login to Azure Container Registry
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_SERVICE_PRINCIPAL }}
             
      - name: Delete images
        run: |
          az acr login --name ${{ secrets.AZURE_REGISTRY_NAME }}
          # Si la imagen existe, eliminarla, si no, imprimir mensaje
          az acr repository show-manifests --name ${{ secrets.AZURE_REGISTRY_NAME }} --repository "syg-docker-db" --query "[?tags[0]=='0.1.0-SNAPSHOT']" > /dev/null 2>&1 \
          && az acr repository delete --name ${{ secrets.AZURE_REGISTRY_NAME }} --repository "syg-docker-d" --image "0.1.0-SNAPSHOT" --yes \
          || echo "Image 'syg-docker-d:0.1.0-SNAPSHOT' does not exist, skipping deletion."
      
      - name: Push images
        run: |
          docker build -f ./docker/database-mysql.Dockerfile -t ${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io/syg-docker-db:0.1.0-SNAPSHOT ./docker
          docker push ${{ secrets.AZURE_REGISTRY_NAME }}.azurecr.io/syg-docker-db:0.1.0-SNAPSHOT
      
      - name: Stop Container in Azure Container Instances
        run: az container stop --name syg-docker-db --resource-group syg-demo

      - name: Start Container in Azure Container Instances
        run: az container start --name syg-docker-db --resource-group syg-demo
